<%# views/study_view.ejs %>
 
<% extend('layout_with_menu') %>

<!--<div id="roller" style="width: 100%; text-align: center; padding: 200px;">
	<div class="lds-roller"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>
</div>-->
<h1>Study: <span id="study_name"></span></h1><input class="yellow" type="button" value="Edit Study Name" onclick="openEditStudyForm('<%= study %>')">
<div id="study">
	<div class="left">
		<div class="graybox owners">
			<h2>Owners</h2>
			<p></p>
			<table id="owners">
			</table>
			<input class="violet" type="button" value="Add owner" onclick="toggleAddForm('add_owner')">
		</div>

		<div class="graybox groups">
			<h2>Groups</h2>
			<p></p>
			<table id="groups">
			</table>
			<input class="violet" type="button" value="Add Group" onclick="toggleAddForm('add_group')">
		</div>

		<div class="graybox allocator default">
			<h2>Allocator</h2> 
			<span class="edit"><img src="/icon/gear.png" onclick="toggleAddForm('change_allocator')"></span>
			<div id="allocator_content">
				
			</div>
		</div>
		<% if(config.lti.enabled == 'true'){ %>
		<div class="graybox lti_platforms default">
			<h2>LTI Platforms</h2>
			<p></p>
			<table id="lti_platforms">
			</table>
			<input class="violet" type="button" value="Add Platform" onclick="toggleAddForm('add_platform')">
		</div>
		<% } %>
	</div>
	<div class="card">
		<div class="top">
			<h2>Tests</h2>
			<input class="violet" type="button" value="Add Test" onclick="toggleAddForm('add_test')">
		</div>
		<div id="tests" class="tests">
		</div>
	</div>
</div>
<div id="add_group" class="new_element floating">
	<div class="floater">
		<div class="form">
			<div id="add_group_tab" class="subform selected">
				<h2>Add group</h2>
				<form id="add_group_form">
					<select id="group_select" name="group">
					</select>
					<input type="submit" value="Add">
					<span class="loader" style="display: none"><div class="lds-roller"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></span>
					<span class="error"></span>
				</form>
			</div>
		</div>
	</div>
</div>

<div id="add_platform" class="new_element floating">
	<div class="floater">
		<div class="form">
			<div id="add_platform_tab" class="subform selected">
				<h2>Add LTI Platform</h2>
				<form id="add_platform_form">
					<p>Name:</p>
					<input type="text" name="name" placeholder="imsglobal">
					<p>UTL:</p>
					<input type="text" name="url" placeholder="https://lti-ri.imsglobal.org/platforms/2056">
					<p>Client ID:</p>
					<input type="text" name="clientId" placeholder="lti-test">
					<p>Authentication Endpoint:</p>
					<input type="text" name="authenticationEndpoint" placeholder="https://lti-ri.imsglobal.org/platforms/2056/authorizations/new">
					<p>Accesstoken Endpoint:</p>
					<input type="text" name="accesstokenEndpoint" placeholder="https://lti-ri.imsglobal.org/platforms/2056/access_tokens">
					<p>JWKS URL:</p>
					<input type="text" name="jkwsUrl" placeholder="https://lti-ri.imsglobal.org/platforms/2056/platform_keys/1952.json">

					<input type="submit" value="Add">
					<span class="loader" style="display: none"><div class="lds-roller"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></span>
					<span class="error"></span>
				</form>
			</div>
		</div>
	</div>
</div>

<div id="change_allocator" class="new_element floating">
	<div class="floater">
		<div class="form">
			<h2>Select the new allocator</h2>
			<form id="change_allocator_form">
				<div id="change_allocator_content">
				</div>
				<input type="button" value="Change Allocator" onclick="changeAllocator()">
				<span class="error"></span>
			</form>
		</div>
	</div>
</div>

<div id="edit_allocator" class="new_element floating">
	<div class="floater">
		<div class="form">
			<h2 id="edit_allocator_title"></h2>
			<form id="edit_allocator_form">
				<div id="edit_allocator_content">
				</div>
				<span class="error"></span>
			</form>
		</div>
	</div>
</div>

<div id="add_owner" class="new_element floating">
	<div class="floater">
		<div class="form">
			<div id="existing_owner_tab" class="subform selected">
				<h2>Add owner</h2>
				<form id="existing_owner_form">
					<input type="text" name="name" placeholder="Owner username" required>
					<input type="submit" value="Add">
					<span class="loader" style="display: none"><div class="lds-roller"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></span>
					<span class="error"></span>
				</form>
			</div>
		</div>
	</div>
</div>

<div id="add_test" class="new_element floating">
	<div class="floater">
		<div class="form">
			<div id="add_test_tab" class="subform selected">
				<h2>Add Test</h2>
				<form id="add_test_form">
					<input type="text" name="name" placeholder="Test name" required>
					<input type="submit" value="Add">
					<span class="loader" style="display: none"><div class="lds-roller"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></span>
					<span class="error"></span>
				</form>
			</div>
		</div>
	</div>
</div>


<div id="edit_study" class="new_element floating">
	<div class="floater">
		<div class="form">
			<div id="edit_study_tab" class="subform selected">
				<h2>Edit Study</h2>
				<form id="edit_study_form">
					<input hidden type="text" name="study">
					<input hidden type="text" name="studyName">
					<input type="text" name="name" id="edit_study_name" placeholder="Study name" required>
					<input type="submit" value="Edit">
					<span class="loader" style="display: none"><div class="lds-roller"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></span>
					<span class="error" id="edit_study_error"></span>
				</form>
			</div>
		</div>
	</div>
</div>

<div id="edit_test" class="new_element floating">
	<div class="floater">
		<div class="form">
			<div id="edit_test_tab" class="subform selected">
				<h2>Edit Test</h2>
				<form id="edit_test_form">
					<input hidden type="text" name="test">
					<input hidden type="text" name="testName">
					<input type="text" name="name" id="edit_test_name" placeholder="Test name" required>
					<input type="submit" value="Edit">
					<span class="loader" style="display: none"><div class="lds-roller"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></span>
					<span class="error" id="edit_test_error"></span>
				</form>
			</div>
		</div>
	</div>
</div>

<div id="add_activity" class="new_element floating">
	<div class="floater">
		<div class="form">
			<div class="tabs">
				<span class="tab selected" onclick="changeTab(this, 'add_activity','new_activity_tab')">Add new activity</span>
				<span class="tab" type="hidden" onclick="changeTab(this, 'add_activity','existing_activity_tab')">Select from existing</span>
			</div>
			<div id="new_activity_tab" class="subform selected">
				<form id="new_activity_form">
					<input type="hidden" name="test">
					<input type="text" name="name" placeholder="Activity name" required>
					<select name="type">
					</select>
					<fieldset id="new_activity_extras">
					</fieldset>
					<input type="submit" value="Add">
					<span class="loader" style="display: none"><div class="lds-roller"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></span>
					<span class="error"></span>
				</form>
			</div>
			<div id="existing_activity_tab" class="subform">
				<form id="existing_activity_form">
					<input type="hidden" name="test">
					<input type="text" name="name" placeholder="Activity name" required>
					<select name="type">
					</select>
					<input disabled type="submit" value="Add (Not enabled)">
					<span class="loader" style="display: none"><div class="lds-roller"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></span>
					<span class="error"></span>
				</form>
			</div>
		</div>
	</div>
</div>

<div id="edit_activity" class="new_element floating">
	<div class="floater">
		<div class="form">
			<form id="edit_activity_form">
				<input type="hidden" name="test">
				<input type="hidden" name="activity">
				<input id="edit_activity_type" type="hidden" name="type">
				<input id="edit_activity_name" type="text" name="name" placeholder="Activity name" required>
				</select>
				<fieldset id="edit_activity_extras">
				</fieldset>
				<input type="submit" value="Edit">
				<span class="loader" style="display: none"><div class="lds-roller"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div></span>
				<span class="error" id="edit_activity_error"></span>
			</form>
		</div>
	</div>
</div>


<div id="iframe_floating" class="new_element floating">
	<div class="floater">
		<iframe src=""></iframe>
	</div>
</div>

<div class="floating_buttons">
	<a unselectable="on" class="basic" onclick="downloadUAConfig()"><img src="/ua.png"></a>
</div>

<script type="module">
	import{ SSEClientManager } from "/libs/SSEClientManager.js";
	// Create an instance of SSEClientManager
	var map = { };
	const sseClient = new SSEClientManager('<%= config.api.url %>/studies/<%= study %>/events', map);

	// Listen for general messages (default "message" event)
	sseClient.on('message', (data) => {
		console.log('New message from server:', data);
		// Update UI or process data here
	});

	// Listen for connection open event
	sseClient.on('open', () => {
		console.log('Connection to SSE server established.');
	});

	// Handle custom event types from the server (if applicable)
	// Example: You might send events like "activity_initialized" from the server
	sseClient.triggerEvent('activity_initialized');
	sseClient.on('activity_initialized', (data) => {
		//console.log('Activity initialized:', data);
		if(data.activityType == "gameplay") {
			PainterFactory.Painters[data.activityType].updateActivityProgress(data.activityId, data.user, 0);
		}
		if(data.activityType == "limesurvey") {
			PainterFactory.Painters[data.activityType].updateActivityResult(data.activityId, data.user, "Started");
		}
	});

	// Handle custom event types from the server (if applicable)
	// Example: You might send events like "activity_progressed" from the server
	sseClient.triggerEvent('activity_progressed');
	sseClient.on('activity_progressed', (data) => {
		//console.log('Activity progressed:', data);
		if(data.activityType == "gameplay") {
			PainterFactory.Painters[data.activityType].updateActivityProgress(data.activityId, data.user, data.val);
		}
	});

	// Handle custom event types from the server (if applicable)
	// Example: You might send events like "activity_completed" from the server
	sseClient.triggerEvent('activity_completed');
	sseClient.on('activity_completed', (data) => {
		//console.log('Activity completed:', data);
		if(data.activityType == "gameplay") {
			PainterFactory.Painters[data.activityType].updateActivityProgress(data.activityId, data.user, 1);
			PainterFactory.Painters[data.activityType].updateActivityCompletion(data.activityId, data.user, "true");
		}
		if(data.activityType == "manual") {
			PainterFactory.Painters[data.activityType].updateActivityCompletion(data.activityId, data.user, data.status);
		}
		if(data.activityType == "limesurvey") {
			PainterFactory.Painters[data.activityType].updateActivityCompletion(data.activityId, data.user, "true");
			PainterFactory.Painters[data.activityType].updateActivityResult(data.activityId, data.user, "Completed");
		}
	});
	// Close the SSE connection when it's no longer needed
	// sseClient.closeConnection();
</script>
<script type="text/javascript">
	let studyid = "<%= study %>";
	let study = null, participants = null, tests = null, allocator = null, groups = null, platforms = null;
	
	$(document).ready(function() {
		let painters = Object.keys(PainterFactory.Painters);

		Simva.getActivityTypes(function(error, activitytypes){
			for (var i = 0; i < activitytypes.length; i++) {
				if(PainterFactory.Painters[activitytypes[i].type]){
					PainterFactory.Painters[activitytypes[i].type].setUtils(activitytypes[i].utils);
					PainterFactory.Painters[activitytypes[i].type].simpleName = activitytypes[i].name;
					PainterFactory.Painters[activitytypes[i].type].description = activitytypes[i].description;

					let row = `<option value="${activitytypes[i].type}">${PainterFactory.Painters[activitytypes[i].type].simpleName}</option>`;
					$('#new_activity_form select[name="type"]').append(row);
				}
			}
		})

		Simva.getAllocatorTypes(function(error, allocatortypes){
			for (var i = 0; i < allocatortypes.length; i++) {
				if(AllocatorFactory.Painters[allocatortypes[i].type]){
					AllocatorFactory.Painters[allocatortypes[i].type].simpleName = allocatortypes[i].name;
					AllocatorFactory.Painters[allocatortypes[i].type].description = allocatortypes[i].description;

					let row = `<div class="row"><input type="radio" name="type" id="allocator_${allocatortypes[i].type}" value="${allocatortypes[i].type}"><label for="allocator_${allocatortypes[i].type}"><span class="name">${AllocatorFactory.Painters[allocatortypes[i].type].simpleName}</span><span class="description">${AllocatorFactory.Painters[allocatortypes[i].type].description}</span></label></div>`;
					$('#change_allocator_content').append(row);
				}
			}
		})

		$('#new_activity_form select[name="type"]').on('change', function(event){
			$('#new_activity_extras').empty();
			$('#new_activity_extras').append(PainterFactory.Painters[$(this).val()].getExtraForm());
		});

		$("#existing_owner_form").on('submit', function(event){
			event.preventDefault();
			let form = Utils.getFormData($("#existing_owner_form"));
			let errorbox = $(this).find('.error');

			for (var i = 0; i < study.owners.length; i++) {
				if(study.owners[i] == form.name){
					errorbox.text('The owner is already in the study.');
					return false;
				}
			}

			study.owners.push(form.name);

			Simva.updateStudy(study, function(error, result){
				if(error && error.responseJSON){
					errorbox.text(error.responseJSON.message);
				}else{
					reloadStudy();
					toggleAddForm('add_owner');
				}
			});

			return false;
		});

		$("#add_group_form").on('submit', function(event){
			event.preventDefault();
			let form = Utils.getFormData($("#add_group_form"));
			let errorbox = $(this).find('.error');

			if(study.groups.indexOf(form.group) !== -1){
				errorbox.text('The group is already in the study');
			}else{
				study.groups.push(form.group);
				Simva.updateStudy(study, function(error, result){
					if(error && error.responseJSON){
						errorbox.text(error.responseJSON.message);
					}else{
						toggleAddForm('add_group');
						reloadStudy();
					}
				});
			}

			return false;
		});

		$("#add_platform_form").on('submit', function(event){
			event.preventDefault();
			let form = Utils.getFormData($("#add_platform_form"));
			let errorbox = $(this).find('.error');

			let platform = {
				url: form.url,
				name: form.name,
				clientId: form.clientId,
				authenticationEndpoint: form.authenticationEndpoint,
				accesstokenEndpoint: form.accesstokenEndpoint,
				authConfig: { "method": "JWK_SET", "key": form.jkwsUrl },
				studyId: studyid
			}

			Simva.addLtiPlatform(platform, function(error, result){
				if(error && error.responseJSON){
					errorbox.text(error.responseJSON.message);
				}else{
					toggleAddForm('add_platform');
					reloadStudy();
					Simva.updateStudy(study, function(error, result){
						reloadStudy();
					});
				}
			});

			return false;
		});
		
		$("#add_test_form").on('submit', function(event){
			event.preventDefault();
			let form = Utils.getFormData($("#add_test_form"));
			let errorbox = $(this).find('.error');

			Simva.addTestToStudy(studyid, form.name, function(error, result){
				if(error && error.responseJSON){
					errorbox.text(error.responseJSON.message);
				}else{
					toggleAddForm('add_test');
					reloadStudy();
				}
			});

			return false;
		});

		$("#new_activity_form").on('submit', function(event){
			event.preventDefault();
			let currentform = this;
			let form = Utils.getFormData($("#new_activity_form"));
			toggleSubmit(currentform);
			let errorbox = $(this).find('.error');

			PainterFactory.Painters[form.type].extractInformation('#new_activity_form', function(error, activity){
				if(error){
					errorbox.text(error);
				}else{
					Simva.addActivityToTest(studyid, form.test, activity, function(error, result){
						toggleSubmit(currentform);
						if(error && error.responseJSON){
							errorbox.text(error.responseJSON.message);
						}else{
							toggleAddForm('add_activity');
							reloadStudy();
							Simva.updateStudy(study, function(error, result){
								reloadStudy();
							});
						}
					});
				}
			});

			return false;
		});

		$("#edit_activity_form").on('submit', function(event){
			event.preventDefault();
			let currentform = this;
			let form = Utils.getFormData($("#edit_activity_form"));
			toggleSubmit(currentform);
			let errorbox = $(this).find('.error');
			PainterFactory.Painters[form.type].extractEditInformation('#edit_activity_form', function(error, updatedActivity){
				if(error){
					errorbox.text(error);
				}else{
					if(Object.keys(updatedActivity).length == 0) {
						errorbox.text("No changes detected !");
						toggleSubmit(currentform);
					} else {
						updatedActivity.id = form.activity;
						console.log("Updated activity :");
						console.log(updatedActivity);
						Simva.updateActivity(updatedActivity, function(error, result){
							toggleSubmit(currentform);
							if(error && error.responseJSON){
								errorbox.text(error.responseJSON.message);
							}else{
								toggleAddForm('edit_activity');
								reloadStudy();
							}
						});
					}
				}
			});
			return false;
		});

		$("#edit_test_form").on('submit', function(event){
			event.preventDefault();
			let currentform = this;
			let form = Utils.getFormData($("#edit_test_form"));
			toggleSubmit(currentform);
			let errorbox = $(this).find('.error');
			if(form.name == form.testName) {
				errorbox.text("No changes detected !");
				toggleSubmit(currentform);
			} else {
				console.log("updated test name");
				var test = { id : form.test , name : form.name};
				console.log(test);
				Simva.updateTest("<%= study %>", test, function(error, result){
					toggleSubmit(currentform);
					if(error && error.responseJSON){
						errorbox.text(error.responseJSON.message);
					}else{
						toggleAddForm('edit_test');
						reloadStudy();
					}
				});
			}
			return false;
		});

		$("#edit_study_form").on('submit', function(event){
			event.preventDefault();
			let currentform = this;
			let form = Utils.getFormData($("#edit_study_form"));
			toggleSubmit(currentform);
			let errorbox = $(this).find('.error');
			if(form.name == form.studyName) {
				errorbox.text("No changes detected !");
				toggleSubmit(currentform);
			} else {
				study.name = form.name;
				Simva.updateStudy(study, function(error, result){	
					toggleSubmit(currentform);
					toggleAddForm('edit_study');
					reloadStudy();
				});
			}
			return false;
		});
		
		loadAddGroups();
		Simva.getStudy("<%= study %>", function(error, study){
			if(!error) {
				Simva.updateStudy(study, function(error, result){
					reloadStudy();
				});
			}
		});
	});

	let downloadUAConfig = function(){
		var content = JSON.stringify({
			study: study._id,
			host: "<%= config.api.host %>",
			protocol: "<%= config.api.protocol %>",
			port: "<%= config.api.port %>",
			url: "<%= config.api.url %>",			
			sso: "<%= config.sso.url %>/realms/<%= config.sso.realm %>/protocol/openid-connect", 
    		client_id: "uadventure"
		}, null, 2);

		var filename = "simva.conf";

		var blob = new Blob([content], {
		 type: "text/plain;charset=utf-8"
		});

		Utils.download(filename, content);
	}

	let toggleAllocatorForm = function(){
		$('#edit_allocator_title').html(AllocatorFactory.Painters[allocator.type].getFormTitle());
		$('#edit_allocator_content').html(AllocatorFactory.Painters[allocator.type].getFormContent());
		$('#edit_allocator').toggleClass('shown');
	}

	let toggleTest = function(id){
		$(`#test_${id}`).find('.activities').toggleClass('collapsed');
	}

	let toggleSubmit = function(form){
		$(form).find('input[type="submit"]').toggle();
		$(form).find('.loader').toggle();
	}

	let changeTab = function(tab, form, subform){
		$(`#${form} .tab`).removeClass('selected');
		$(`#${form} .subform`).removeClass('selected');
		$(tab).toggleClass('selected');
		$(`#${subform}`).toggleClass('selected');
	}

	let reloadStudy = function(){
		Simva.getStudy(studyid, function(error, result){

			if(!error){
				study = result;

				let tocomplete = 6, done = 0;
				let completed = function(){
					done++

					if(done === tocomplete){
						paintStudy(study, participants, tests, allocator, groups, platforms);
					}
				}

				let errorhappened = function(error){
					// paint the errors
				}

				Simva.getStudyParticipants(studyid, function(error, result){
					if(!error){
						participants = result;
						completed();
					}
				});

				Simva.getStudyTests(studyid, function(error, result){
					if(!error){
						tests = result;
						completed();
					}
				});

				Simva.getAllocator(studyid, function(error, result){
					if(!error){
						allocator = result;
						completed();
					}
				});

				Simva.getStudyGroups(studyid, function(error, result){
					if(!error){
						groups = result;
						completed();
					}
				});

				Simva.getGroups(function(error, result){
					if(!error){
						allgroups = result;
						completed();
					}
				});

				Simva.getLtiPlatforms(studyid, function(error, result){
					if(!error){
						platforms = result;
						completed();
					}
				});
			}
		});
	}

	let loadAddGroups = function(){
		Simva.getGroups(function(error, result){
			if(!error){
				paintAddGroup(result);
			}
		});
	}

	// Functionality

	let removeGroup = function(group){
		if(confirm("Are you sure do you want to delete this group?")){
			let toremove = -1;
			for (var i = 0; i < study.groups.length; i++) {
				if(study.groups[i] === group){
					toremove = i;
					break;
				}
			}

			study.groups.splice(i, 1);

			Simva.updateStudy(study, function(error, result){
				reloadStudy();
			});
		}
	}

	let removePlatform = function(platform){
		if(confirm("Are you sure do you want to delete this platform?")){
			Simva.removePlatform(platform, function(error, result){
				reloadStudy();
			});
		}
	}

	let removeOwner = function(owner){
		if(confirm("Are you sure do you want to delete this owner?")){
			let toremove = -1;
			for (var i = 0; i < study.owners.length; i++) {
				if(study.owners[i] === owner){
					toremove = i;
					break;
				}
			}

			study.owners.splice(i, 1);

			Simva.updateStudy(study, function(error, result){
				reloadStudy();
			});
		}
	}

	let deleteTest = function(test){
		if(confirm("Are you sure do you want to delete the test?\nAll the activities and data will be deleted too.")){
			let toremove = -1;
			for (var i = 0; i < study.tests.length; i++) {
				if(study.tests[i] === test){
					toremove = i;
					break;
				}
			}

			study.tests.splice(i, 1);

			Simva.updateStudy(study, function(error, result){
				reloadStudy();
			});
		}
	}

	let deleteActivity = function(activity){
		if(confirm("Are you sure do you want to delete the activity?\nAll the data of the activity will be deleted too.")){
			Simva.deleteActivity(activity, function(error, result){
				reloadStudy();
			});
		}
	}

	let openActivityForm = function(test){
		$('#add_activity').toggleClass('shown');
		$('#add_activity input[name="test"]').val(test);
	}

	let openEditActivityForm = function(activityId){
		Simva.getActivity(activityId, function(error, activity){
			if(!error){
				document.getElementById("edit_activity_error").innerHTML = "";
				var inputElement = document.getElementById('edit_activity_name');
				inputElement.value = activity.name;
				var inputElement = document.getElementById('edit_activity_type');
				inputElement.value = activity.type;
				$('#edit_activity_extras').empty();
				$('#edit_activity_extras').append(PainterFactory.Painters[activity.type].getEditExtraForm());
				PainterFactory.Painters[activity.type].updateInputEditExtraForm(activity);
				$('#edit_activity').toggleClass('shown');
				$('#edit_activity input[name="test"]').val(activity.test);
				$('#edit_activity span[class="error"]').val("");
				$('#edit_activity input[name="activity"]').val(activity._id);
			}
		});
	}

	let openEditTestForm = function(testId){
		Simva.getStudyTest("<%= study %>", testId, function(error, test){
			if(!error){
				document.getElementById("edit_test_error").innerHTML = "";
				var inputElement = document.getElementById('edit_test_name');
				inputElement.value = test.name;
				$('#edit_test').toggleClass('shown');
				$('#edit_test input[name="test"]').val(test._id);
				$('#edit_test span[class="error"]').val("");
				$('#edit_test input[name="testName"]').val(test.name);
			}
		});
	}

	let openEditStudyForm = function(studyId){
		Simva.getStudy(studyId, function(error, study){
			if(!error){
				document.getElementById("edit_study_error").innerHTML = "";
				var inputElement = document.getElementById('edit_study_name');
				inputElement.value = study.name;
				$('#edit_study').toggleClass('shown');
				$('#edit_study input[name="study"]').val(study._id);
				$('#edit_study input[name="studyName"]').val(study.name);
			}
		});
	}

	let toggleAddForm = function(id){
		$(`#${id}`).toggleClass('shown');
	}

	// Main Paint functions

	let paintStudy = function(study, participants, tests, allocator, groups, platforms){
		$('#study_name').text(study.name);

		paintOwners(study.owners);

		paintAllocator(allocator, tests, groups, participants);

		paintGroups(groups);
	
		paintPlatforms(platforms);

		let fullyPaintTest = function(test){
			paintTest(test);

			Simva.getTestActivities(studyid, test._id, function(error, result){
				paintTestActivities(test, result, participants);
			});
		}

		$('#tests').empty();
		if(tests.length === 0){
			$('#tests').append('<p>There are no tests for this study. Try adding one using the button on the right.</p>');
		}else{
			for (var i = 0; i < tests.length; i++) {
				fullyPaintTest(tests[i]);
			}
		}
	}

	let paintAddGroup = function(groups){
		$('#group_select').empty('');
		if(groups.length == 0){
			$('#group_select').append('<p>You dont have any group. Go to groups tab to create one.</p>');
		}else{
			for (var i = 0; i < groups.length; i++) {
				$('#group_select').append(addGroupRow(groups[i]));
			}
		}
	}

	let paintOwners = function(owners){
		$('#owners').html('');
		for (var i = 0; i < owners.length; i++) {
			$('#owners').append(ownerRow(owners[i]));
		}
	}

	let paintGroups = function(groups){
		$('#groups').html('');
		if(groups.length == 0){
			$('#groups').append('<p>There are no groups yet.</p>');
		}else{
			for (var i = 0; i < groups.length; i++) {
				$('#groups').append(groupRow(groups[i]));
			}
		}
	}

	let paintPlatforms = function(platforms){
		$('#lti_platforms').html('');
		if(platforms.length == 0){
			$('#lti_platforms').append('<p>There are no platforms yet.</p>');
		}else{
			for (var i = 0; i < platforms.length; i++) {
				$('#lti_platforms').append(platformRow(platforms[i]));
			}
		}
	}

	let paintAllocator = function(allocator, tests, groups, participants){
		AllocatorFactory.Painters[allocator.type].setTests(tests);
		AllocatorFactory.Painters[allocator.type].setGroups(groups);
		AllocatorFactory.Painters[allocator.type].setStudy(study);
		AllocatorFactory.Painters[allocator.type].setParticipants(participants);

		AllocatorFactory.Painters[allocator.type].paintAllocator(allocator);

		$(`#allocator_${allocator.type}`).prop('checked',true);
	}

	let changeAllocator = function(){
		let type = $('#change_allocator_form input:radio[name=type]:checked').val();

		if(allocator.type !== type){
			Simva.updateAllocator(study._id, { type: type }, function(error, result){
				if(error){
					$('#change_allocator_form .error').val(error.message);
				}else{
					toggleAddForm('change_allocator');
					reloadStudy();
				}
			});
		}else{
			toggleAddForm('change_allocator');
		}
	}

	let paintTest = function(test){
		$('#tests').append(`<div id="test_${test._id}" class="test">
			<div class="top"><h3>${test.name}</h3><input class="violet" type="button" value="Expand/Collapse" onclick="toggleTest('${test._id}')">
			<input class="green" type="button" value="Add activity" onclick="openActivityForm('${test._id}')">
			<input class="yellow" type="button" value="Edit" onclick="openEditTestForm('${test._id}')">
			<input class="red" type="button" value="Delete" onclick="deleteTest('${test._id}')"></div>
			<div class="activities collapsed">${roller}</div>`);
	}

	let paintTestActivities = function(test, activities, participants){
		$(`#test_${test._id} .activities`).empty();

		if(activities.length === 0){
			$(`#test_${test._id} .activities`).text('There are no activities in this test. Add one using the button on the right.');
		}else{
			for (var i = 0; i < activities.length; i++) {
				switch(activities[i].type){
					case 'rageminio':
					case 'miniokafka':
					case 'rageanalytics':
					case 'limesurvey':
					case 'gameplay':
					case 'activity':
					case 'manual':
					case 'ltitool':
					case 'imspackage':
						PainterFactory.Painters[activities[i].type].fullyPaintActivity(activities[i]);
						break;
					default:
						ActivityPainter.fullyPaintActivity(activities[i]);
						break;
				}
			}
		}
	}


	let ownerRow = function(owner){
		let toret = `<tr><td>${owner}</td><td><input class="red" type="button" value="Remove"`;
		if(owner == '<%= user.data.username %>'){
			toret += ' disabled="disabled"';
		}else{
			toret += ` onclick="removeOwner('${owner}')"`
		}

		toret += '></td></tr>';
		return toret;
	}

	let groupRow = function(group){
		let toret = `<tr><td>${group.name}</td><td><input class="red" type="button" value="Remove" onclick="removeGroup('${group._id}')" `
		if(group.link && group.link.type){
			toret += ' disabled';
		}
		toret += '></td></tr>';

		return toret;
	}

	let platformRow = function(platform){
		let toret = `<tr><td>${platform.name}</td><td><input class="red" type="button" value="Remove"
		onclick="removePlatform('${platform._id}')"
		></td></tr>`;
		return toret;
	}

	let addGroupRow = function(group){
		return `<option value="${group._id}">${group.name}</option>`;
	}

	let allocationRow = function(allocation, tests){
		let toret = `<tr><td>${allocation.username}</td><td><select name="test">`;

		if(tests.length > 0){
			for (var i = 0; i < tests.length; i++) {
				if(allocation.test == tests[i]._id){
					toret += `<option value="${tests[i]._id}">${tests[i].name}</option>`;
				}else{
					toret += `<option value="${tests[i]._id}" selected>${tests[i].name}</option>`;
				}
			}
		}else{
			toret += '<option>NO TESTS</option>';
		}
		

		toret += '</select></td></tr>';
		return 
	}
</script>
<script type="text/javascript" src="/activities/activitypainter.js"></script>
<script type="text/javascript" src="/activities/limesurveypainter.js"></script>
<script type="text/javascript" src="/activities/rageanalyticspainter.js"></script>
<script type="text/javascript" src="/activities/miniopainter.js"></script>
<script type="text/javascript" src="/activities/rageminiopainter.js"></script>
<script type="text/javascript" src="/activities/gameplaypainter.js"></script>
<script type="text/javascript" src="/activities/manualpainter.js"></script>
<script type="text/javascript" src="/activities/ltitoolpainter.js"></script>
<script type="text/javascript" src="/activities/imspackagepainter.js"></script>
<script type="text/javascript" src="/allocators/defaultallocatorpainter.js"></script>
<script type="text/javascript" src="/allocators/groupallocatorpainter.js"></script>

